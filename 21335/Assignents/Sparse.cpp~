#include<iostream>

void swap(int &x, int &y)
{
	int temp = x;
	x = y;
	y = temp;
}

void ascend(int **matrix,int length)
{
	

	for(int i = 0; i < length; ++i)
	{
		int k = i;
		
		for(int j = k + 1; j < length ; j++)
		{
			if(matrix[0][j] < matrix[0][k])
			{
				k = j;
			}
		}
		
		swap(matrix[0][i],matrix[0][k]);
		swap(matrix[1][i],matrix[1][k]);
		swap(matrix[2][i],matrix[2][k]);
	}

}

void swapArray(int **ptr1, int **ptr2)
{
	int *temp = NULL;
	
	temp = *ptr1;
	*ptr1 = *ptr2;
	*ptr2 = temp;
	
}

class Sparse
{

private :
	
	int m_terms;
	int **matrix;
	
public : 

	Sparse(int terms = 0) :	m_terms(terms)
	{
		matrix = new int *[3];
	
		for(int i = 0; i < 3; ++i)
		{
			matrix[i] = new int[m_terms];
		}
	}
	
	Sparse transpose()
	{
		Sparse temp = *this;
	
		swapArray(&(temp.matrix[0]), &(temp.matrix[1]));
		ascend(temp.matrix, temp.m_terms);
		
	return temp;
	}
	
	friend std::istream& operator>>(std::istream &in, Sparse &m);
	
	friend std::ostream& operator<<(std::ostream &out, const Sparse &m);
	
	friend Sparse operator+(const Sparse &m1, const Sparse &m2);
	
};


std::istream& operator>>(std::istream &in, Sparse &m)
{
	for(int j = 0; j < m.m_terms; ++j)
	{
		for(int i = 0; i < 3; ++i)
		{
			if(i == 0)
			{
				std::cout << "Enter Row number :- ";
			}
			
			else if(i == 1)
			{
				std::cout << "Enter Column number :- ";
			}
			
			else 
			{
				std::cout << "Enter corresponding value :- ";			
			}
			
			in >> m.matrix[i][j];
		}
	}

return in;
}


std::ostream& operator<<(std::ostream &out, const Sparse &m)
{
	for(int i = 0; i < 3; ++i)
	{
		for(int j = 0; j < m.m_terms; ++j)
		{
			out << m.matrix[i][j] << " ";
		}
		
		std::cout << '\n';
	}
	
return out;	
}


Sparse operator+(const Sparse &m1, const Sparse &m2)
{
	int count = 0;
	int k1(0), k2(0);
	
	for(int j = 0; j < m1.m_terms; ++j)
	{
		
		if((m1.matrix[0][j] == m2.matrix[0][j]) && (m1.matrix[1][j] == m2.matrix[1][j]))
		{
			++count;
		}
	}
	
	Sparse temp(m1.m_terms + m2.m_terms - count);
	
	for(int i = 0; i < temp.m_terms; ++i)
	{
		if(k1 == m1.m_terms)
		{
			if(k2 == m2.m_terms)
			{
				break;
			}
		
			for(int j = 0; j < 3; ++j)
			{
				temp.matrix[j][i] = m2.matrix[j][k2];
			}
			
			k2++;
			
			continue;
		}
	

		if(m1.matrix[0][k1] == m2.matrix[0][k2] && m1.matrix[1][k1] == m2.matrix[1][k2])
		{
			for(int j = 0; j < 2; ++j)
			{
				temp.matrix[j][i]= m1.matrix[j][k1];
			}
			
			temp.matrix[2][i] = m1.matrix[2][k1] + m2.matrix[2][k2];
			
			++k1; ++k2;
		}
	
		else if(m1.matrix[0][k1] == m2.matrix[0][k2])
		{
			if(m1.matrix[1][k1] < m2.matrix[1][k1])
			{
				for(int j = 0; j < 3; ++j)
				{
					temp.matrix[j][i]= m1.matrix[j][k1];
				}
				
				++k1;
			}
			
			else
			{
				for(int j = 0; j < 3; ++j)
				{
					temp.matrix[j][i]= m2.matrix[j][k2];
				}
				
				++k2;
			}
		}
	
		else if(m1.matrix[0][k1] != m2.matrix[0][k2])
		{
			if(m1.matrix[0][k1] < m2.matrix[0][k2])
			{
				for(int j = 0; j < 3; ++j)
				{
					temp.matrix[j][i]= m1.matrix[j][k1];
				}
				
				++k1; 
			}
		
			else
			{
				for(int j = 0; j < 3; ++j)
				{
					temp.matrix[j][i]= m2.matrix[j][k2];
				}
				
				++k2;
			}
		}
	}
		
return temp;
}

int main()
{
	Sparse m1(3);
	Sparse m2(3);
	
	std::cin >> m1;
	std::cout << m1;
	
	std::cout << '\n';
	
	std::cin >> m2;
	std::cout << m2;
	
	std::cout << '\n';
	
	std::cout << m1 + m2 << '\n';
return 0;	
}
